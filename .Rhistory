ifelse(stocks == 'TLT', 1, 0)
getWeights <- function(data, periods) {
backtest.data.by.stock <- lapply(1:dim(data)[2], function(stock) {
stock.batch.data <- lapply(periods, function(period) {
period.batch.data <- data[, stock]
period.batch.lenght <- length(period.batch.data)
period.batch <- (period.batch.data[period.batch.lenght] / period.batch.data[period.batch.lenght - period]) - 1
return(period.batch)
})
stock.batch.data <- do.call(cbind, stock.batch.data)
stock.batch <- apply(stock.batch.data, 1, mean)
return(stock.batch)
})
backtest.data.by.stock <- do.call(cbind, backtest.data.by.stock)
backtest.data.by.stock <- set_colnames(backtest.data.by.stock, stocks)
if((backtest.data.by.stock[, 'IWM'] < 0) & (backtest.data.by.stock[, 'SPY'] < 0)){
result <- ifelse(stocks == 'TLT', 1, 0)
} else if(backtest.data.by.stock[, 'SPY'] < backtest.data.by.stock[, 'IWM']){
result <- ifelse(stocks == 'IMW', 1, 0)
} else{
result <- ifelse(stocks == 'SPY', 1, 0)
}
return(result)
}
# Проверим работоспособность функции на полной матрице:
getWeights(backtest.data, periods)
ifelse(stocks == 'TLT', 1, 0)
ifelse(stocks == 'IMW', 1, 0)
getWeights <- function(data, periods) {
backtest.data.by.stock <- lapply(1:dim(data)[2], function(stock) {
stock.batch.data <- lapply(periods, function(period) {
period.batch.data <- data[, stock]
period.batch.lenght <- length(period.batch.data)
period.batch <- (period.batch.data[period.batch.lenght] / period.batch.data[period.batch.lenght - period]) - 1
return(period.batch)
})
stock.batch.data <- do.call(cbind, stock.batch.data)
stock.batch <- apply(stock.batch.data, 1, mean)
return(stock.batch)
})
backtest.data.by.stock <- do.call(cbind, backtest.data.by.stock)
backtest.data.by.stock <- set_colnames(backtest.data.by.stock, stocks)
if((backtest.data.by.stock[, 'IWM'] < 0) & (backtest.data.by.stock[, 'SPY'] < 0)){
result <- ifelse(stocks == 'TLT', 1, 0)
} else if(backtest.data.by.stock[, 'SPY'] < backtest.data.by.stock[, 'IWM']){
result <- ifelse(stocks == 'IWM', 1, 0)
} else{
result <- ifelse(stocks == 'SPY', 1, 0)
}
return(result)
}
# Проверим работоспособность функции на полной матрице:
getWeights(backtest.data, periods)
# Индекс текущего торгового дня. (иницализируем так, чтобы хватило данных для первого подсчета весов)
# В цикле будем увеличивать на 1 на каждой итерации.
day <- lookback + 1
# Индекс дня, в который будет происходить перестройка портфеля.
# В каждый момент перестроки портфеля будем обновлять эту переменную,
# как текущий день + число дней удержания портфеля holding.period.
# Инициализируем индексом первого торгового дня.
trade.day <- day
# Матрица прибыли/убытка по каждому активу за каждый торговый день
pnl_inc_leg <- matrix(0L, nrow = nrow(backtest.data), ncol = ncol(backtest.data))
pnl_inc_leg <- set_colnames(pnl_inc_leg, stocks)
# Вектор из трех элементов для хранения числа штук каждого актива на итерации бэктеста
assets.count <- numeric(ncol(backtest.data))
backtest.data[day, ]
# Будем итерироваться по циклу до тех пор пока индекс текущего дня не превзойдет число строк в данных
while (day <= nrow(backtest.data)) {
# Необходимо посчитать и занести в матрицу pnl_inc_leg в строку с индексом day прибыль/убыток
# за один день (с предыдущего на текущий).
pnl_inc_leg[day,] <- assets.count  * (backtest.data[day,] - backtest.data[day - 1,])
# Условие на удержание текущей позиции
if (day < trade.day) {
day <- day + 1
next
}
# Если нет, то получаем новые веса и меняем (если веса получились другие) купленные активы
range <- (day - lookback):day
cur.weights <- getWeights(backtest.data[range, ], periods)
# Будем считать, что есть возможность посчитать веса стратегии и тут же зайти по этим же ценам.
# Cчитаем издержки равными нулю
assets.count <- floor(money * cur.weights / backtest.data[day, ])
day <- day + 1
trade.day <- trade.day + holding.period
}
####################################################################################
# HW 1
# Посчитать суммарные прибыль/убыток за каждый день по портфелю, используйте функцию rowSums
pnl_inc <- rowSums(pnl_inc_leg)
plot(pnl_inc, type = 'l')
# Необходимо найти стоимость портфеля за каждый день
# Это исходный капитал стратегии плюс накопленная прибыль/убыток за каждый день
nav <- money + cumsum(pnl_inc)
plot(nav, type = 'l')
# СреднийдневнойПУ * 252
return_ann_fun   <- function(pnl) {
return(mean(pnl) * 252)
}
# Станд.Откл.дневныхПУ * sqrt(252)
std_ann_fun      <- function(pnl) {
return(sd(pnl) * sqrt(252))
}
# sqrt(mean(pmin(дневнойПУ, 0) ^ 2)) * sqrt(252)
downside_ann_fun <- function(pnl) {
return(sqrt(mean(pmin(pnl, 0) ^ 2)) * sqrt(252))
}
# Annualreturn / AnnualDownsideRisk
sortino_fun      <- function(pnl) {
return(return_ann_fun(pnl) / downside_ann_fun(pnl))
}
# Annualreturn / Annualstd
sharpe_fun       <- function(pnl) {
return(return_ann_fun(pnl) / std_ann_fun(pnl))
}
# Максимальныепотеринакопл.ПУзавремяторговли
max_drawdown_fun <- function(pnl) {
nav <- cumsum(pnl)
drawdown <- nav - cummax(nav)
return(min(drawdown))
}
functions <- list(
'sortino' = sortino_fun,
'sharpe'= sharpe_fun,
'max_drawdown'= max_drawdown_fun,
'return_ann' = return_ann_fun,
'std_ann' = std_ann_fun
)
strategy.kpi <- lapply(functions, function(fun) {
kpi.batch <- fun(pnl_inc)
})
kpi.calculate <- function(functions, pnl) {
kpi.values <- lapply(functions, function(fun) {
kpi.batch <- fun(pnl)
})
kpi.values <- do.call(cbind, kpi.values)
kpi.values <- set_names(kpi.values, names(functions))
return(kpi.values[1, ])
}
kpi.calculate <- function(functions, pnl) {
kpi.values <- lapply(functions, function(fun) {
kpi.batch <- fun(pnl)
})
kpi.values <- do.call(cbind, kpi.values)
kpi.values <- set_names(kpi.values, names(functions))
return(kpi.values[1, ])
}
kpi.calculate(functions, pnl_inc)
max(nav)
min(nav)
max(nav) - min(nav)
print(-3.343420e+05)
kpi.calculate(functions, pnl_inc)
com <- 0.0005
base.strategy.while.loop <- function(day, start.trade.day, lookback, periods, holding.period, use.new_fun = FALSE) {
pnl_inc_leg <- matrix(0L, nrow = nrow(backtest.data), ncol = ncol(backtest.data))
pnl_inc_leg <- set_colnames(pnl_inc_leg, stocks)
yesterday.assets.count <- numeric(ncol(backtest.data))
assets.count <- yesterday.assets.count
trade.day <- day + start.trade.day
while (day <= nrow(backtest.data)) {
# Изменение в каждой позиции * Цена позиции (за прошлый день, т.к. операция была совершена вчера)
# * Торговые издержки
costs <- abs(assets.count - yesterday.assets.count) * backtest.data[day - 1,] * com
pnl_inc_leg[day,] <- (assets.count  * (backtest.data[day,] - backtest.data[day - 1,])) - costs
if (day < trade.day) {
day <- day + 1
next
}
range <- (day - lookback):day
if (use.new_fun) {
cur.weights <- getWeights_2(backtest.data[range, ], periods)
} else {
cur.weights <- getWeights(backtest.data[range, ], periods)
}
yesterday.assets.count <- assets.count
assets.count <- floor(money * cur.weights / backtest.data[day, ]
# корректируем количество активов, которые мы можем приобрести
# из-за появления торговых издержек
/ (1 + com))
day <- day + 1
trade.day <- trade.day + holding.period
}
pnl_inc <- rowSums(pnl_inc_leg)
return(pnl_inc)
}
base.strategy <- function(periods, holding.period, use.new_fun = FALSE) {
lookback <- max(periods)
day <- lookback + 1
# Проводим бек-тестирование для каждого дня для того, чтобы убрать погрещность holding.period
pnl_inc_leg.full <- lapply(0:(holding.period - 1), function(start.day) {
pnl_inc_leg.batch <- base.strategy.while.loop(
day = day
, start.trade.day = start.day
, lookback = lookback
, periods = periods
, holding.period = holding.period
, use.new_fun = use.new_fun
)
})
pnl_inc_leg.full <- do.call(cbind, pnl_inc_leg.full)
pnl_inc_leg.mean <- apply(pnl_inc_leg.full, 1, mean)
return(pnl_inc_leg.mean)
}
portfolio.value <- function(money, pnl) {
return(money + cumsum(pnl))
}
pnl.with.costs <- base.strategy(periods, holding.period)
plot(portfolio.value(money, strat.with.costs), type = 'l')
pnl.with.costs <- base.strategy(periods, holding.period)
plot(portfolio.value(money, strat.with.costs), type = 'l')
plot(portfolio.value(money, pnl.with.costs), type = 'l')
kpi.calculate(functions, pnl.with.costs)
print(1.391720e-01)
# Переопределяю функцию подбора весов
getWeights_2 <- function(data, periods) {
backtest.data.by.stock <- lapply(1:dim(data)[2], function(stock) {
stock.batch.data <- lapply(periods, function(period) {
period.batch.data <- data[, stock]
period.batch.lenght <- length(period.batch.data)
period.batch <- (period.batch.data[period.batch.lenght] / period.batch.data[period.batch.lenght - period]) - 1
return(period.batch)
})
stock.batch.data <- do.call(cbind, stock.batch.data)
stock.batch <- apply(stock.batch.data, 1, mean)
return(stock.batch)
})
backtest.data.by.stock <- do.call(cbind, backtest.data.by.stock)
backtest.data.by.stock <- set_colnames(backtest.data.by.stock, stocks)
if (length(backtest.data.by.stock[backtest.data.by.stock > 1.005]) > 0) {
result <- ifelse(1:length(stocks) %in% which(backtest.data.by.stock > 1.005), 1, 0)
result <- result / length(result[result == 1])
} else {
result <- ifelse(1:length(stocks) == which.min(backtest.data.by.stock), 1, 0)
}
return(result)
}
set.seed(1)
max.value <- floor(dim(backtest.data)[1] * 0.3)
repeat {
holding.period.temp <- sample(1:100, 1)
periods.temp <- sort(sample(1:max.value, sample(1:10, 1)))
pnl.full <- base.strategy(periods = periods.temp, holding.period = holding.period.temp, use.new_fun = TRUE)
loockback.indent <- max(periods.temp) + 2
pnl.lookback <- pnl.full[loockback.indent:length(pnl.full)]
sharpe <- sharpe_fun(pnl.lookback)
print(paste(periods.temp, collapse = ', '))
print(holding.period.temp)
print(sharpe)
if (sharpe >= 1 || is.na(sharpe)) {
print(sprintf('Periods = %s, holding.period = %s', paste(periods.temp, collapse = ', '), holding.period.temp))
print(sprintf('Sharpe = %s', sharpe))
break
}
}
# Ответ
{
periods.best <- c(22, 589, 649, 693, 1048, 1436, 1660)
holding.period.best <- 4
pnl.best <- base.strategy(periods = periods.best, holding.period = holding.period.best, use.new_fun = TRUE)
sharpe.best <- sharpe_fun(pnl.best[(max(periods.best) + 2):length(pnl.best)])
nav.best <- portfolio.value(money, pnl.best)[(max(periods.best) + 2):length(pnl.best)]
plot(nav.best, type = 'l')
print(sprintf('Periods = %s, holding.period = %s', paste(periods.best, collapse = ', '), holding.period.best))
print(sprintf('Sharpe = %s', sharpe.best))
print(sprintf('Lookback = %s', round(1 - length(nav.best) / dim(backtest.data)[1], 2)))
}
# Ответ
{
periods.best <- c(22, 589, 649, 693, 1048, 1436, 1660)
holding.period.best <- 4
pnl.best <- base.strategy(periods = periods.best, holding.period = holding.period.best, use.new_fun = TRUE)
sharpe.best <- sharpe_fun(pnl.best[(max(periods.best) + 2):length(pnl.best)])
nav.best <- portfolio.value(money, pnl.best)[(max(periods.best) + 2):length(pnl.best)]
plot(nav.best, type = 'l')
print(sprintf('Periods = %s, holding.period = %s', paste(periods.best, collapse = ', '), holding.period.best))
print(sprintf('Sharpe = %s', sharpe.best))
print(sprintf('Lookback = %s "%"', round(1 - length(nav.best) / dim(backtest.data)[1], 2)))
}
# Ответ
{
periods.best <- c(22, 589, 649, 693, 1048, 1436, 1660)
holding.period.best <- 4
pnl.best <- base.strategy(periods = periods.best, holding.period = holding.period.best, use.new_fun = TRUE)
sharpe.best <- sharpe_fun(pnl.best[(max(periods.best) + 2):length(pnl.best)])
nav.best <- portfolio.value(money, pnl.best)[(max(periods.best) + 2):length(pnl.best)]
plot(nav.best, type = 'l')
print(sprintf('Periods = %s, holding.period = %s', paste(periods.best, collapse = ', '), holding.period.best))
print(sprintf('Sharpe = %s', sharpe.best))
print(sprintf('Lookback = %s%s', round(1 - length(nav.best) / dim(backtest.data)[1], 2), '%'))
}
# Ответ
{
periods.best <- c(22, 589, 649, 693, 1048, 1436, 1660)
holding.period.best <- 4
pnl.best <- base.strategy(periods = periods.best, holding.period = holding.period.best, use.new_fun = TRUE)
sharpe.best <- sharpe_fun(pnl.best[(max(periods.best) + 2):length(pnl.best)])
nav.best <- portfolio.value(money, pnl.best)[(max(periods.best) + 2):length(pnl.best)]
plot(nav.best, type = 'l')
print(sprintf('Periods = %s, holding.period = %s', paste(periods.best, collapse = ', '), holding.period.best))
print(sprintf('Sharpe = %s', sharpe.best))
print(sprintf('Lookback = %s%s of total time range', round(1 - length(nav.best) / dim(backtest.data)[1], 2), '%'))
}
# Переопределяю функцию подбора весов
getWeights_2 <- function(data, periods) {
backtest.data.by.stock <- lapply(1:dim(data)[2], function(stock) {
stock.batch.data <- lapply(periods, function(period) {
period.batch.data <- data[, stock]
period.batch.lenght <- length(period.batch.data)
period.batch <- (period.batch.data[period.batch.lenght] / period.batch.data[period.batch.lenght - period]) - 1
return(period.batch)
})
stock.batch.data <- do.call(cbind, stock.batch.data)
stock.batch <- apply(stock.batch.data, 1, mean)
return(stock.batch)
})
backtest.data.by.stock <- do.call(cbind, backtest.data.by.stock)
backtest.data.by.stock <- set_colnames(backtest.data.by.stock, stocks)
#backtest.data.by.stock[which(backtest.data.by.stock) < 1]
print(backtest.data.by.stock)
result <- 1
#if (length(backtest.data.by.stock[backtest.data.by.stock > 1.005]) > 0) {
#  result <- ifelse(1:length(stocks) %in% which(backtest.data.by.stock > 1.005), 1, 0)
#  result <- result / length(result[result == 1])
#} else {
#  result <- ifelse(1:length(stocks) == which.min(backtest.data.by.stock), 1, 0)
#}
return(result)
}
getWeights_2(periods)
getWeights_2(backtest.data, periods)
a <- c(-1, 0, 1)
pa <- a[which(a) >= 0)]
pa <- a[which(a) >= 0]
pa <- a[which(a >= 0)]
pa
a <- c(-5, 6, 10)
pa <- a[which(a >= 0)]
pa
ap <- a[which(a >= 0)]
apm <- which.max(ap)
apm
apm <- ap[which.max(ap)]
apm
apm <- a[which(a == ap[which.max(ap)])]
apm
apm <- max(ap)
apm
apm <- ifelse(a == max(ap), 1, 0)
apm
# Переопределяю функцию подбора весов
getWeights_2 <- function(data, periods) {
backtest.data.by.stock <- lapply(1:dim(data)[2], function(stock) {
stock.batch.data <- lapply(periods, function(period) {
period.batch.data <- data[, stock]
period.batch.lenght <- length(period.batch.data)
period.batch <- (period.batch.data[period.batch.lenght] / period.batch.data[period.batch.lenght - period]) - 1
return(period.batch)
})
stock.batch.data <- do.call(cbind, stock.batch.data)
stock.batch <- apply(stock.batch.data, 1, mean)
return(stock.batch)
})
backtest.data.by.stock <- do.call(cbind, backtest.data.by.stock)
backtest.data.by.stock <- set_colnames(backtest.data.by.stock, stocks)
return.postive <- backtest.data.by.stock[which(backtest.data.by.stock >= 0)]
retuen.negative <- backtest.data.by.stock[which(backtest.data.by.stock < 0)]
if (length(backtest.data.by.stock[backtest.data.by.stock > 1.005]) > 0) {
result <- ifelse(1:length(stocks) %in% which(backtest.data.by.stock > 1.005), 1, 0)
result <- result / length(result[result == 1])
} else {
result <- ifelse(1:length(stocks) == which.min(backtest.data.by.stock), 1, 0)
}
return(result)
}
# Ответ
{
periods.best <- c(22, 589, 649, 693, 1048, 1436, 1660)
holding.period.best <- 4
pnl.best <- base.strategy(periods = periods.best, holding.period = holding.period.best, use.new_fun = TRUE)
sharpe.best <- sharpe_fun(pnl.best[(max(periods.best) + 2):length(pnl.best)])
nav.best <- portfolio.value(money, pnl.best)[(max(periods.best) + 2):length(pnl.best)]
plot(nav.best, type = 'l')
print(sprintf('Periods = %s, holding.period = %s', paste(periods.best, collapse = ', '), holding.period.best))
print(sprintf('Sharpe = %s', sharpe.best))
print(sprintf('Lookback = %s%s of total time range', round(1 - length(nav.best) / dim(backtest.data)[1], 2), '%'))
}
# Переопределяю функцию подбора весов
getWeights_2 <- function(data, periods) {
backtest.data.by.stock <- lapply(1:dim(data)[2], function(stock) {
stock.batch.data <- lapply(periods, function(period) {
period.batch.data <- data[, stock]
period.batch.lenght <- length(period.batch.data)
period.batch <- (period.batch.data[period.batch.lenght] / period.batch.data[period.batch.lenght - period]) - 1
return(period.batch)
})
stock.batch.data <- do.call(cbind, stock.batch.data)
stock.batch <- apply(stock.batch.data, 1, mean)
return(stock.batch)
})
backtest.data.by.stock <- do.call(cbind, backtest.data.by.stock)
backtest.data.by.stock <- set_colnames(backtest.data.by.stock, stocks)
return.postive <- backtest.data.by.stock[which(backtest.data.by.stock >= 0)]
retuen.negative <- backtest.data.by.stock[which(backtest.data.by.stock < 0)]
if (length(backtest.data.by.stock[backtest.data.by.stock > 0.005]) > 0) {
result <- ifelse(1:length(stocks) %in% which(backtest.data.by.stock > 0.005), 1, 0)
result <- result / length(result[result == 1])
} else {
result <- ifelse(1:length(stocks) == which.min(backtest.data.by.stock), 1, 0)
}
return(result)
}
# Ответ
{
periods.best <- c(22, 589, 649, 693, 1048, 1436, 1660)
holding.period.best <- 4
pnl.best <- base.strategy(periods = periods.best, holding.period = holding.period.best, use.new_fun = TRUE)
sharpe.best <- sharpe_fun(pnl.best[(max(periods.best) + 2):length(pnl.best)])
nav.best <- portfolio.value(money, pnl.best)[(max(periods.best) + 2):length(pnl.best)]
plot(nav.best, type = 'l')
print(sprintf('Periods = %s, holding.period = %s', paste(periods.best, collapse = ', '), holding.period.best))
print(sprintf('Sharpe = %s', sharpe.best))
print(sprintf('Lookback = %s%s of total time range', round(1 - length(nav.best) / dim(backtest.data)[1], 2), '%'))
}
set.seed(1)
max.value <- floor(dim(backtest.data)[1] * 0.3)
max.value <- floor(dim(backtest.data)[1] * 0.3)
repeat {
holding.period.temp <- sample(1:100, 1)
periods.temp <- sort(sample(1:max.value, sample(1:10, 1)))
pnl.full <- base.strategy(periods = periods.temp, holding.period = holding.period.temp, use.new_fun = TRUE)
loockback.indent <- max(periods.temp) + 2
pnl.lookback <- pnl.full[loockback.indent:length(pnl.full)]
sharpe <- sharpe_fun(pnl.lookback)
print(sharpe)
if (sharpe >= 1 || is.na(sharpe)) {
print(sprintf('Periods = %s, holding.period = %s', paste(periods.temp, collapse = ', '), holding.period.temp))
print(sprintf('Sharpe = %s', sharpe))
break
}
}
# Переопределяю функцию подбора весов
getWeights_2 <- function(data, periods) {
backtest.data.by.stock <- lapply(1:dim(data)[2], function(stock) {
stock.batch.data <- lapply(periods, function(period) {
period.batch.data <- data[, stock]
period.batch.lenght <- length(period.batch.data)
period.batch <- (period.batch.data[period.batch.lenght] / period.batch.data[period.batch.lenght - period]) - 1
return(period.batch)
})
stock.batch.data <- do.call(cbind, stock.batch.data)
stock.batch <- apply(stock.batch.data, 1, mean)
return(stock.batch)
})
backtest.data.by.stock <- do.call(cbind, backtest.data.by.stock)
backtest.data.by.stock <- set_colnames(backtest.data.by.stock, stocks)
return.postive <- backtest.data.by.stock[which(backtest.data.by.stock >= 0)]
retuen.negative <- backtest.data.by.stock[which(backtest.data.by.stock < 0)]
#if (length(backtest.data.by.stock[backtest.data.by.stock > 0.005]) > 0) {
#  result <- ifelse(1:length(stocks) %in% which(backtest.data.by.stock > 0.005), 1, 0)
#  result <- result / length(result[result == 1])
#} else {
#  result <- ifelse(1:length(stocks) == which.min(backtest.data.by.stock), 1, 0)
#}
result <- ifelse(1:length(stocks) == which.min(backtest.data.by.stock), 1, 0)
return(result)
}
# Ответ
{
periods.best <- c(22, 589, 649, 693, 1048, 1436, 1660)
holding.period.best <- 4
pnl.best <- base.strategy(periods = periods.best, holding.period = holding.period.best, use.new_fun = TRUE)
sharpe.best <- sharpe_fun(pnl.best[(max(periods.best) + 2):length(pnl.best)])
nav.best <- portfolio.value(money, pnl.best)[(max(periods.best) + 2):length(pnl.best)]
plot(nav.best, type = 'l')
print(sprintf('Periods = %s, holding.period = %s', paste(periods.best, collapse = ', '), holding.period.best))
print(sprintf('Sharpe = %s', sharpe.best))
print(sprintf('Lookback = %s%s of total time range', round(1 - length(nav.best) / dim(backtest.data)[1], 2), '%'))
}
set.seed(1)
max.value <- floor(dim(backtest.data)[1] * 0.4)
repeat {
holding.period.temp <- sample(1:100, 1)
periods.temp <- sort(sample(1:max.value, sample(1:10, 1)))
pnl.full <- base.strategy(periods = periods.temp, holding.period = holding.period.temp, use.new_fun = TRUE)
loockback.indent <- max(periods.temp) + 2
pnl.lookback <- pnl.full[loockback.indent:length(pnl.full)]
sharpe <- sharpe_fun(pnl.lookback)
print(sharpe)
if (sharpe >= 1 || is.na(sharpe)) {
print(sprintf('Periods = %s, holding.period = %s', paste(periods.temp, collapse = ', '), holding.period.temp))
print(sprintf('Sharpe = %s', sharpe))
break
}
}
#
# Periods = 291, 375, 611, 676, 1699, holding.period = 29
# Sharpe = 1.11966735665325
periods
periods.best <- c(22, 62, 100, 589, 649, 693, 1048, 1436, 1660)
# Ответ
{
periods.best <- c(22, 62, 100, 589, 649, 693, 1048, 1436, 1660)
holding.period.best <- 4
pnl.best <- base.strategy(periods = periods.best, holding.period = holding.period.best, use.new_fun = TRUE)
sharpe.best <- sharpe_fun(pnl.best[(max(periods.best) + 2):length(pnl.best)])
nav.best <- portfolio.value(money, pnl.best)[(max(periods.best) + 2):length(pnl.best)]
plot(nav.best, type = 'l')
print(sprintf('Periods = %s, holding.period = %s', paste(periods.best, collapse = ', '), holding.period.best))
print(sprintf('Sharpe = %s', sharpe.best))
print(sprintf('Lookback = %s%s of total time range', round(1 - length(nav.best) / dim(backtest.data)[1], 2), '%'))
}
